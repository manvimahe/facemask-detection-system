# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MXndCj5vQBRaxQaL6k8VdCyD5anlaZTQ
"""

pip install opendatasets

pip install pandas

import opendatasets as od
import pandas

od.download(
    "https://www.kaggle.com/datasets/vijaykumar1799/face-mask-detection")

from google.colab import drive
drive.mount('/content/drive')

import os

os.chdir("/content/face-mask-detection")
Dataset='Dataset'
Data_dir=os.listdir(Dataset)
print(Data_dir)

import cv2
import numpy as np
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split

# labels=[]
# for category in Data_dir:
#   labels.append(category)
#   print(category)

# print(labels)

img_rows, img_cols=112, 112

images=[]
labels=[]



#preprocessing the image and getting an image and labels array
for category in Data_dir:
  folder_path= os.path.join(Dataset, category)
  for img in os.listdir(folder_path):
    img_path= os.path.join(folder_path, img)
    img=cv2.imread(img_path)

    try:
      grayscale_img=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

      resized_img=cv2.resize(grayscale_img, (img_rows, img_cols))
      images.append(resized_img)
      labels.append(category)

    except Exception as e:
      print('Exception :', e)

images=np.array(images)/255.0
images=np.reshape(images, (images.shape[0], img_rows, img_cols, 1))
print(labels)

print(labels)

#one hot encoding

label_to_int = {label: idx for idx, label in enumerate(Data_dir)}
int_labels = np.array([label_to_int[label] for label in labels])

num_classes = len(Data_dir)
labels = to_categorical(int_labels, num_classes)
(train_X, test_X, train_Y, test_Y)=train_test_split(images, labels, test_size=0.25, random_state=0);

labels.shape

print(labels)

import matplotlib.pyplot as plt

plt.imshow(train_X[10], cmap='gray')
plt.show()

from keras.models import Sequential
from keras.layers import Dense, Activation, Flatten, Dropout
from keras.layers import Conv2D, MaxPooling2D

num_classes=3
batch_size=32

model=Sequential()

model.add(Conv2D(64,(3,3), input_shape=(img_rows, img_cols, 1)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(128, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dropout(0.5))

model.add(Dense(64, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))

print(model.summary())

pip install pydot pydot-ng graphviz

from tensorflow.keras.utils import plot_model
plot_model(model, to_file='face_mask.png')

from keras.optimizers import Adam

epochs=50

model.compile(loss='categorical_crossentropy',
              optimizer = Adam(learning_rate=0.001),
              metrics=['accuracy'])
fitted_model=model.fit(train_X, train_Y, epochs=epochs, validation_split=0.25)

plt.plot(fitted_model.history['loss'], 'r', label='training loss')
plt.plot(fitted_model.history['val_loss'], label='validation loss')
plt.xlabel('Number of Epochs')
plt.ylabel('Loss Value')
plt.legend()
plt.show()


plt.plot(fitted_model.history['accuracy'], 'r', label='training accuracy')
plt.plot(fitted_model.history['val_accuracy'], label='validation accuracy')
plt.xlabel('Number of Epochs')
plt.ylabel('Accuracy Value')
plt.legend()
plt.show()

model.save('face_detection.h5')





